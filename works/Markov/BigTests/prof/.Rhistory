data1 <- read.table("markov_bench_books.csv", h=T, sep=";")
# Reorganisation des lignes en les triant par k puis par n
data1 <- data1[order(data1$k, data1$n),]
attach(data1)
data1 <- read.table("markov_bench_books.csv", h=T, sep=";")
data1 <- read.table("markov_bench_books.csv", h=T, sep=",")
setwd("A:\\Documents\\conmet\\github\\works\\Markov\\BigTests\\prof")
data1 <- read.table("markov_bench_books.csv", h=T, sep=",")
# Reorganisation des lignes en les triant par k puis par n
data1 <- data1[order(data1$k, data1$n),]
attach(data1)
data1 <- data1[order(data1$k, data1$n),]
View(data1)
data1 <- read.table("markov_bench_books.csv", h=T, sep=";")
# Reorganisation des lignes en les triant par k puis par n
data1 <- data1[order(data1$k, data1$n),]
attach(data1)
plot(k, count1)
# C'est assez moche avec les options par defaut, mais on peut mieux faire
# en jouant avec les options
plot(k, count1, pch=3, xlab="k", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
summary(lm(count1 ~ k))
# La pente de la regression lineaire vaut 31.59 et elle n'est pas statistiquement
# differente de 0 (p-value Pr(>|t|) largement superieure a 0.05).
# Le coefficient de determination (R^2) vaut 10^-12, donc quasiment 0.
# On peut l'interpreter comme le pourcentage de variance (de count1) expliquÃ© par
# les variations du paramÃ¨tre k.
abline(lm(count1 ~ k)) # on voit bien que la pente est quasi nulle
# Verifiez ici que count1 ne depend pas non plus de m
plot(m, count1)
# C'est assez moche avec les options par defaut, mais on peut mieux faire
# en jouant avec les options
plot(m, count1, pch=3, xlab="m", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
summary(lm(count1 ~ m))
# La pente de la regression lineaire vaut 45.04 et elle n'est pas statistiquement
# differente de 0 (p-value Pr(>|t|) largement superieure a 0.05).
# Le coefficient de determination (R^2) vaut 10^-28, donc quasiment 0.
# On peut l'interpreter comme le pourcentage de variance (de count1) expliquÃ© par
# les variations du paramÃ¨tre m.
abline(lm(count1 ~ m))
plot(n, count1, pch=3, xlab="n", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
# Faire le fit lineaire de count1 en fonction de n
summary(lm(count1 ~ n))
# Quel R^2 obtenez-vous ?
# R^2 = 0.9994 environ Ã©gal Ã  1
# Ajoutez la droite de regression sur le graphique.
abline(lm(count1 ~ n))
# count1 correspond au nombre de comparaisons faites par le quicksort
# En principe on peut s'attendre a ce que ce nombre soit proportionel
# a n.log_2(n). Regardons si on peut obtenir un meilleur fit si on
# prend n.log_2(n) en x.
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
# On voit que seul le parametre n a un coefficient statistiquement different de 0
# (cf les p-values, colonne Pr(>|t|))
# Faites la meme regression multiple pour count2 et count3 : de quels parametres
# dependent-ils ? est-ce attendu etant donne l'algorithme ?
lmcount2 <- lm(count2 ~ n + k + m)
summary(lmcount2)
# Count 2 : Il dÃ©pend principalement de n et k.
lmcount3 <- lm(count3 ~ n + k + m)
summary(lmcount3)
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount2 <- lm(count2 ~ n + k + m)
summary(lmcount2)
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount2 <- lm(count2 ~ n + k + m)
summary(lmcount2)
lmcount3 <- lm(count3 ~ n + k + m)
summary(lmcount3)
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount2 <- lm(count2 ~ n + k + m)
summary(lmcount2)
lmcount3 <- lm(count3 ~ n + k + m)
summary(lmcount3)
plot(k, count1)
# C'est assez moche avec les options par defaut, mais on peut mieux faire
# en jouant avec les options
plot(k, count1, pch=3, xlab="k", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
summary(lm(count1 ~ k))
summary(lm(count1 ~ n))
summary(lm(count1 ~ z + 0)) # le '+ 0' force une ordonnee a l'origine nulle
log2n <- log(n,2)
z <- n*log2n
plot(z, count1, pch=3, xlab="n.log2(n)", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
summary(lm(count1 ~ z + 0)) # le '+ 0' force une ordonnee a l'origine nulle
# R^2 = 1
summary(lm(count2 ~ n))
summary(lm(count2 ~ m))
summary(lm(count3 ~ n))
summary(lm(count3 ~ k))
summary(lm(count3 ~ m))
plot(m, count3, pch=3, xlab="n", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
plot(m, count2, pch=3, xlab="n", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
plot(n, count2, pch=3, xlab="n", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
plot(k, count2, pch=3, xlab="n", ylab="count1 (tri des prefixes)",  cex.lab=0.9, cex.axis=0.8, cex=0.8)
cor(cputime, count1)
cor(count1, n)
cor(count2, n)
list(c(cor(count1, n), cor(count1, k), cor(count1, m)),
c(cor(count2, n), cor(count2, k), cor(count2, m)))
c(c(cor(count1, n), cor(count1, k), cor(count1, m)),
c(cor(count2, n), cor(count2, k), cor(count2, m)))
list("count1"=c(cor(count1, n), cor(count1, k), cor(count1, m)),
"count2"=c(cor(count2, n), cor(count2, k), cor(count2, m)))
list("count1"=c(cor(count1, n), cor(count1, k), cor(count1, m)),
"count2"=c(cor(count2, n), cor(count2, k), cor(count2, m)),
"count3"=c(cor(count3, n), cor(count3, k), cor(count3, m)))
c("count1"=c(cor(count1, n), cor(count1, k), cor(count1, m)),
"count2"=c(cor(count2, n), cor(count2, k), cor(count2, m)),
"count3"=c(cor(count3, n), cor(count3, k), cor(count3, m)))
c("count1"=c("n"=cor(count1, n), "k"=cor(count1, k), "m"=cor(count1, m)),
"count2"=c("n"=cor(count2, n), "k"=cor(count2, k), "m"=cor(count2, m)),
"count3"=c("n"=cor(count3, n), "k"=cor(count3, k), "m"=cor(count3, m)))
list("count1"=c("n"=cor(count1, n), "k"=cor(count1, k), "m"=cor(count1, m)),
"count2"=c("n"=cor(count2, n), "k"=cor(count2, k), "m"=cor(count2, m)),
"count3"=c("n"=cor(count3, n), "k"=cor(count3, k), "m"=cor(count3, m)))
as.data.frame(list("count1"=c("n"=cor(count1, n), "k"=cor(count1, k), "m"=cor(count1, m)),
"count2"=c("n"=cor(count2, n), "k"=cor(count2, k), "m"=cor(count2, m)),
"count3"=c("n"=cor(count3, n), "k"=cor(count3, k), "m"=cor(count3, m)))
)
as.data.frame(c("count1"=c("n"=cor(count1, n), "k"=cor(count1, k), "m"=cor(count1, m)),
"count2"=c("n"=cor(count2, n), "k"=cor(count2, k), "m"=cor(count2, m)),
"count3"=c("n"=cor(count3, n), "k"=cor(count3, k), "m"=cor(count3, m)))
)
data1 <- read.table("out_TRUE_RND_BIG.csv", h=T, sep=";")
# Reorganisation des lignes en les triant par k puis par n
data1 <- data1[order(data1$k, data1$n),]
attach(data1)
summary(lm(count1 ~ n))
summary(lm(count1 ~ n))
lmcount1 <- lm(count1 ~ n + k + m)
summary(lmcount1)
lmcount2 <- lm(count2 ~ n + k + m)
summary(lmcount2)
lmcount3 <- lm(count3 ~ n + k + m)
summary(lmcount3)
summary(lm(count1 ~ n))
summary(lm(count2 ~ n))
summary(lm(count2 ~ k))
summary(lm(count2 ~ m))
summary(lm(count3 ~ n))
summary(lm(count3 ~ k))
as.data.frame(list("count1"=c("n"=cor(count1, n), "k"=cor(count1, k), "m"=cor(count1, m)),
"count2"=c("n"=cor(count2, n), "k"=cor(count2, k), "m"=cor(count2, m)),
"count3"=c("n"=cor(count3, n), "k"=cor(count3, k), "m"=cor(count3, m)))
)
dataST <- read.table("outSerialStochTest.csv", h=T, sep=";")
dataST <- dataST[order(dataST$k, dataST$n),]
attach(dataST)
plot(dataO0$time, col="black", ylab="time")
plot(dataST$time, col="black", ylab="time")
plot(data1$time, col="black", ylab="time")
plot(dataST$time, col="red", ylab="time")
abline(h=mean(data1$time), col="black")
abline(h=mean(dataST$time), col="red")
plot(data1$time, col="black", ylab="time")
points(dataST$time, col="red", ylab="time")
abline(h=mean(data1$time), col="black")
abline(h=mean(dataST$time), col="red")
xxx <- subset(data1, m==100000 & k==3 & n==6640)$time
plot(xxx, col="black", ylab="time")
points(dataST$time, col="red", ylab="time")
abline(h=mean(xxx), col="black")
abline(h=mean(dataST$time), col="red")
plot(xxx$time, col="black", ylab="time")
xxx <- subset(data1, m==100000 & k==3 & n==6640)
plot(xxx$time, col="black", ylab="time")
xxx
xxx <- subset(data1, m==100000 & k==3 & n==6622)
xxx
plot(xxx$time, col="black", ylab="time")
points(dataST$time, col="red", ylab="time")
abline(h=mean(xxx$time), col="black")
abline(h=mean(dataST$time), col="red")
dataST <- read.table("outSerialStochTest.csv", h=T, sep=";")
dataST <- dataST[order(dataST$k, dataST$n),]
attach(dataST)
xxx <- subset(data1, m==100000 & k==3 & n==6622)
xxx
plot(xxx$time, col="black", ylab="time")
points(dataST$time, col="red", ylab="time")
abline(h=mean(xxx$time), col="black")
abline(h=mean(dataST$time), col="red")
dataST$time
points(dataST$time, col="red", ylab="time")
points(dataST$time, col="red")
abline(h=mean(dataST$time), col="red")
points(dataST$time, col="red")
plot(dataST$time, col="black", ylab="time")
points(xxx$time, col="red")
dataST <- read.table("outSerialStochTest.csv", h=T, sep=";")
dataST <- dataST[order(dataST$k, dataST$n),]
attach(dataST)
dataSTR <- read.table("outSerialStochTestRnd.csv", h=T, sep=";")
dataSTR <- dataSTR[order(dataSTR$k, dataSTR$n),]
attach(dataSTR)
plot(dataST$time, col="black", ylab="time")
points(dataSTR$time, col="red")
abline(h=mean(dataSTR$time), col="black")
abline(h=mean(dataST$time), col="red")
plot(dataSTR$time, col="black", ylab="time")
points(dataST$time, col="red")
abline(h=mean(dataSTR$time), col="black")
abline(h=mean(dataST$time), col="red")
